# This policy enforces the use of internal ips only(ip restriction) for communication
# These sentinel policies enforce Wells Fargo security principles

# Import tfplan-functions.sentinel
# with alias "plan
import "tfplan-functions" as plan
import "generic-functions" as gen
import "strings"
import "types"

//**********************Variables to be used***********************************
selected_node = null
messages = {}

//******Resource Types internal IP Param Map***********************************

resourceTypesInternalIPMap = {
	"google_dataproc_cluster": [{
		"key":             "cluster_config.0.gce_cluster_config.0.internal_ip_only",
		"expected_result": true,
	}],
	"google_sql_database_instance": [{
		"key":             "settings.0.ip_configuration.0.ipv4_enabled",
		"expected_result": false,
	}],
	"google_compute_forwarding_rule": [{
		"key":             "load_balancing_scheme",
		"expected_result": "INTERNAL_MANAGED",
	}],
	"google_dns_managed_zone": [{
		"key":             "visibility",
		"expected_result": "private",
	}],
	"google_container_cluster": [{
		"key":             "private_cluster_config.0.enable_private_nodes",
		"expected_result": true,
	},
		{
			"key":             "private_cluster_config.0.enable_private_endpoint",
			"expected_result": true,
		}],
}

//******Following function is being used to validate the internal ip settings**
//as per the GCP resource's requirement
//address is the key and rc is the value of resource_changes in the mock of tfplan-v2 file
check_internal_ip = func(address, rc) {
	map_results = resourceTypesInternalIPMap[rc.type]
	msg_list = null

	for map_results as rec {
		selected_node = plan.evaluate_attribute(rc, rec.key)
		selected_node_result = rec.expected_result

		if types.type_of(selected_node) is "null" or types.type_of(selected_node) is "undefined" {
			if msg_list is null {
				msg_list = []
			}
			append(msg_list, "It does not have " + rec.key + " defined.")
		} else {
			if selected_node is not selected_node_result {
				if msg_list is null {
					msg_list = []
				}
				append(msg_list, "The service should be accessible through internal ip only, please set value of " + rec.key + " to " + plan.to_string(selected_node_result) + " to make it as per requirement.")
			}
		}
	}
	return msg_list
}

//*******************validating internal ip only*******************************
messages_ip_internal = {}

for resourceTypesInternalIPMap as key_address, _ {
	# Get all the instances on the basis of type
	allResources = plan.find_resources(key_address)
	for allResources as address, rc {
		message = null
		message = check_internal_ip(address, rc)

		if types.type_of(message) is not "null" {

			gen.create_sub_main_key_list(messages, messages_ip_internal, address)

			append(messages_ip_internal[address], message)
			append(messages[address], message)
		}
	}
}

//*****************************************************************************

GCP_INTERNAL_IP = rule {
	length(messages_ip_internal) is 0
}

# Main rule
print(messages)

main = rule { GCP_INTERNAL_IP }
