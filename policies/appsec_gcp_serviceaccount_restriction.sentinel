# This policy enforces use of custom service account
# These sentinel policies enforce Wells Fargo security principles

# Import common-functions/tfplan-functions/tfplan-functions.sentinel
# with alias "plan"
import "tfplan-functions" as plan
import "generic-functions" as gen
import "strings"
import "types"

# Filter to GCE instances with violations
# Warnings will be printed for all violations since the last parameter is true

//**********************Variables to be used***********************************
selected_node = null
default_compute_sa = "compute@developer.gserviceaccount.com"
default_cloud_function_sa = "@appspot.gserviceaccount.com" #"<PROJECT_ID>@appspot.gserviceaccount.com"

messages = {}

# Resource Types Service Account Param Map
resourceTypesServiceAccountMap = {
	"google_dataproc_cluster": {
		"key":        "cluster_config.0.gce_cluster_config.0.service_account",
		"default_sa": default_compute_sa,
	},
	"google_cloudfunctions_function": {
		"key":        "service_account_email",
		"default_sa": default_cloud_function_sa,
	},
}

//******Following function is being used to validate the service account details as per the GCP resource's requirement
//address is the key and rc is the value of resource_changes in the mock of tfplan-v2 file
check_service_account_config = func(address, rc) {

	key = resourceTypesServiceAccountMap[rc.type]["key"]
	selected_node = plan.evaluate_attribute(rc, key)

	if types.type_of(selected_node) is "null" or types.type_of(selected_node) is "undefined" {

		result = plan.evaluate_attribute(rc.change.after_unknown, key)

		if plan.to_string(result) is "null" or plan.to_string(result) is "undefined" {
			return address + " service is not having any service account, please assign it"
		} else {
			return null
		}

	} else {

		default_sa = resourceTypesServiceAccountMap[rc.type]["default_sa"]

		arr_sa = strings.split(selected_node, default_sa)

		if length(arr_sa) > 1 {
			return "The service account of " + address + " service can not be a default compute service account, please change it"
		} else {
			return null
		}

	}
}

//*******************validating service account only***************************
messages_sa = {}
for resourceTypesServiceAccountMap as key_address, _ {
	# Get all the instances on the basis of type
	allResources = plan.find_resources(key_address)
	for allResources as address, rc {

		message = null
		message = check_service_account_config(address, rc)
		if types.type_of(message) is not "null" {

			gen.create_sub_main_key_list(messages, messages_sa, address)

			append(messages_sa[address], message)
			append(messages[address], message)
		}
	}
}

//********************************************************************************************************

SVC_ACCOUNT_CHECK = rule {
	length(messages_sa) is 0
}

# Main rule
print(messages)

main = rule { SVC_ACCOUNT_CHECK }
